{"version":3,"sources":["components/StateList.jsx","components/schema.jsx","components/Form.jsx","App.js","reportWebVitals.js","index.js"],"names":["StateList","StrictMode","value","Yup","shape","name","min","required","email","renderErrorMessage","msg","className","Formulario","state","phone","addressZip","addressStreet","addressNumber","addressComplement","addressDistrict","addressCity","addressState","self","values","actions","console","log","ev","setFieldValueAux","target","setFieldValue","cep","replace","length","fetch","then","res","json","data","logradouro","bairro","localidade","uf","validationSchema","schema","onSubmit","this","validateOnMount","initialValues","isValid","render","type","onBlur","onBlurCep","component","React","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.019b81d1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst StateList = () => {\r\n    return (\r\n        <React.StrictMode>\r\n            <option value={null}>Selecione o Estado</option>\r\n            <option value=\"AC\">Acre</option>\r\n            <option value=\"AL\">Alagoas</option>\r\n            <option value=\"AP\">Amapá</option>\r\n            <option value=\"AM\">Amazonas</option>\r\n            <option value=\"BA\">Bahia</option>\r\n            <option value=\"CE\">Ceará</option>\r\n            <option value=\"DF\">Distrito Federal</option>\r\n            <option value=\"ES\">Espirito Santo</option>\r\n            <option value=\"GO\">Goiás</option>\r\n            <option value=\"MA\">Maranhão</option>\r\n            <option value=\"MT\">Mato Grosso</option>\r\n            <option value=\"MS\">Mato Grosso do Sul</option>\r\n            <option value=\"MG\">Minas Gerais</option>\r\n            <option value=\"PA\">Pará</option>\r\n            <option value=\"PB\">Paraíba</option>\r\n            <option value=\"PE\">Pernambuco</option>\r\n            <option value=\"PI\">Piauí</option>\r\n            <option value=\"RJ\">Rio de Janeiro</option>\r\n            <option value=\"RN\">Rio Grande do Norte</option>\r\n            <option value=\"RS\">Rio Grande do Sul</option>\r\n            <option value=\"RO\">Rondônia</option>\r\n            <option value=\"RR\">Roraima</option>\r\n            <option value=\"SC\">Santa Catarina</option>\r\n            <option value=\"SP\">São Paulo</option>\r\n            <option value=\"SE\">Sergipe</option>\r\n            <option value=\"TO\">Tocantins</option>\r\n        </React.StrictMode>\r\n    )\r\n}\r\n\r\nexport default StateList;","import * as Yup from 'yup';\r\n\r\nexport default Yup.object().shape({\r\n    name: Yup.string().min(2).required(),\r\n    email: Yup.string().email().required(),\r\n    // phone: '', \r\n    // addressZip: '', // CEP\r\n    // addressStreet: '', // logradouro\r\n    // addressNumber: '',\r\n    // addressComplement: '',\r\n    // addressDistrict: '',    // bairro\r\n    // addressCity: '',\r\n    // addressState: '',\r\n});\r\n  \r\n","import React from 'react';\r\nimport {Formik, Form, Field, ErrorMessage} from 'formik';\r\nimport StateList from './StateList';\r\nimport schema from './schema'\r\nimport '../App.css'\r\n\r\nconst renderErrorMessage = (msg) => (<label className=\"errorNotice\">{msg}</label>);\r\nexport default class Formulario extends React.Component{\r\n\r\n    state = {\r\n        name: '',\r\n        email: '',\r\n        phone: '', \r\n        addressZip: '', // CEP\r\n        addressStreet: '', // logradouro\r\n        addressNumber: '',\r\n        addressComplement: '',\r\n        addressDistrict: '',    // bairro\r\n        addressCity: '',\r\n        addressState: '',\r\n    };\r\n    self = this;\r\n\r\n    onSubmit(values, actions){\r\n        console.log('SUBMIT', values);\r\n    }\r\n\r\n    onBlurCep(ev, setFieldValueAux){\r\n        const {value} = ev.target;\r\n        const setFieldValue = setFieldValueAux;  // Ajusta a referencia pra função\r\n        \r\n        // Trabalhando com REGEX pra ajustar o CEP\r\n        // /[^0-9]/g pega tudo que nao for numero\r\n        const cep = value?.replace(/[^0-9]/g, '');\r\n    \r\n        if(cep?.length !== 8){  // '?' verifica se existe, então tenta acessar o length\r\n          return;\r\n        }\r\n    \r\n        //Extrai o json com os dados do CEP\r\n        let test = fetch(`https://viacep.com.br/ws/${cep}/json/`)\r\n          .then((res) => res.json())\r\n          .then((data) => {\r\n            console.log(data);\r\n            setFieldValue('addressStreet', data.logradouro);\r\n            setFieldValue('addressDistrict', data.bairro);\r\n            setFieldValue('addressCity', data.localidade);\r\n            setFieldValue('addressState', data.uf);\r\n          });\r\n      }\r\n\r\n    render(){\r\n        return(\r\n            <Formik\r\n            validationSchema={schema}\r\n            onSubmit={this.onSubmit}\r\n            validateOnMount\r\n            initialValues={this.state}>\r\n            {({isValid, setFieldValue}) => (\r\n                <Form className=\"form-controller\">\r\n                    <div className=\"field-controller\">\r\n                        <label>Formulário de cadastro para recebimento dos adesivos</label>\r\n                    </div>\r\n                    <div className=\"field-controller\">\r\n                        <label>Nome: \r\n                            <ErrorMessage render={renderErrorMessage} name=\"name\"/>\r\n                        </label>\r\n                        <Field name=\"name\" type=\"text\"/>\r\n                    </div>\r\n                    <div className=\"field-controller\">\r\n                        <label>Email: \r\n                        <ErrorMessage render={renderErrorMessage} name=\"email\"/>\r\n                        </label>\r\n                        <Field name=\"email\" type=\"email\"/>\r\n                    </div>\r\n                    <div className=\"field-controller\">\r\n                        <label>Telefone: </label>\r\n                        <Field name=\"phone\" type=\"text\"/>\r\n                    </div>\r\n                    <div className=\"field-controller\">\r\n                        <label>CEP: </label>\r\n                        <Field name=\"addressZip\" type=\"text\" onBlur={\r\n                            (ev) => this.onBlurCep(ev, setFieldValue)\r\n                        }/>\r\n                    </div>\r\n                    <div className=\"field-controller\">\r\n                        <label>Logradouro: </label>\r\n                        <Field name=\"addressStreet\" type=\"text\"/>\r\n                    </div>\r\n                    <div className=\"field-controller\">\r\n                        <label>Número: </label>\r\n                        <Field name=\"addressNumber\" type=\"text\"/>\r\n                    </div>\r\n                    <div className=\"field-controller\">\r\n                        <label>Complemento: </label>\r\n                        <Field name=\"addressComplement\" type=\"text\"/>\r\n                    </div>\r\n                    <div className=\"field-controller\">\r\n                        <label>Bairro: </label>\r\n                        <Field name=\"addressDistrict\" type=\"text\"/>\r\n                    </div>\r\n                    <div className=\"field-controller\">\r\n                        <label>Cidade: </label>\r\n                        <Field name=\"addressCity\" type=\"text\"/>\r\n                    </div>\r\n                    <div className=\"field-controller\">\r\n                        <label>Estado: </label>\r\n                        <Field component=\"select\" name=\"addressState\">\r\n                            <StateList />\r\n                        </Field>\r\n                    </div>\r\n                    <button type=\"submit\" /*disabled={!isValid}*/>Enviar</button>\r\n                </Form>\r\n            )}   \r\n            </Formik>\r\n        )\r\n    }\r\n    \r\n}\r\n","import React from 'react'\r\nimport './App.css';\r\nimport Formulario from './components/Form.jsx'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Formulario />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}